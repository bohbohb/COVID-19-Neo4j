{"version":3,"file":"angular-neo4j.es5.js","sources":["../../../build/src/angular-neo4j.module.ts","../../../build/src/angular-neo4j.component.ts","../../../build/src/angular-neo4j.service.ts"],"sourcesContent":["import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { AngularNeo4jComponent } from './angular-neo4j.component';\r\nimport { AngularNeo4jService } from './angular-neo4j.service';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\n\r\nexport * from './angular-neo4j.component';\r\nexport * from './angular-neo4j.service';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, ReactiveFormsModule],\r\n  exports: [AngularNeo4jComponent],\r\n  providers: [AngularNeo4jService],\r\n  declarations: [AngularNeo4jComponent]\r\n})\r\nexport class AngularNeo4jModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: AngularNeo4jModule,\r\n      providers: [AngularNeo4jService]\r\n    };\r\n  }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { AngularNeo4jService } from './angular-neo4j.service';\r\n\r\n@Component({\r\n  selector: 'angular-neo4j',\r\n  template: \"<form [formGroup]=\\\"loginForm\\\" (ngSubmit)=\\\"connect()\\\"> <label>URL: <br /> <input formControlName=\\\"url\\\" placeholder=\\\"bolt://host:port\\\"> </label> <br /> <br /> <label>Username: <br /> <input formControlName=\\\"username\\\"> </label> <br /> <br /> <label>Password: <br /> <input formControlName=\\\"password\\\"> </label> <br /> <br /> <label> <input formControlName=\\\"encrypted\\\" type=\\\"checkbox\\\"> Encrypted </label> <br /> <br /> <button type=\\\"submit\\\">Connect</button> <button type=\\\"button\\\" (click)=\\\"disconnect()\\\">Disconnect</button> </form> <br /> <br /> <form [formGroup]=\\\"queryForm\\\" (ngSubmit)=\\\"run()\\\"> <label>Cypher Query: <br /> <textarea formControlName=\\\"query\\\" placeholder=\\\"MATCH (o:Object {attrib: {value}}) RETURN o\\\"></textarea> </label> <br /> <br /> <label>Parameters JSON: <br /> <textarea formControlName=\\\"params\\\" placeholder='{ \\\"value\\\": \\\"value\\\" }'></textarea> </label> <br /> <br /> <button type=\\\"submit\\\">Run</button> </form> <br /> <br /> Results: <pre> {{results | json}} </pre>\",\r\n  styles: [\"\"]\r\n})\r\nexport class AngularNeo4jComponent implements OnInit {\r\n  loginForm: FormGroup;\r\n  queryForm: FormGroup;\r\n  driver: any;\r\n  results: any;\r\n\r\n  constructor(private fb: FormBuilder, private neo4j: AngularNeo4jService) {}\r\n\r\n  ngOnInit() {\r\n    this.createForms();\r\n  }\r\n\r\n  createForms() {\r\n    this.loginForm = this.fb.group({\r\n      url: 'bolt://localhost:7687',\r\n      username: '',\r\n      password: '',\r\n      encrypted: true\r\n    });\r\n    this.queryForm = this.fb.group({\r\n      query: '',\r\n      params: ''\r\n    });\r\n  }\r\n\r\n  connect() {\r\n    const formModel = this.loginForm.value;\r\n    this.neo4j\r\n      .connect(\r\n        formModel.url,\r\n        formModel.username,\r\n        formModel.password,\r\n        formModel.encrypted\r\n      )\r\n      .then(driver => {\r\n        if (driver) {\r\n          console.log(`Successfully connected to ${this.loginForm.value.url}`);\r\n        }\r\n      });\r\n  }\r\n\r\n  disconnect() {\r\n    this.neo4j.disconnect();\r\n  }\r\n\r\n  run() {\r\n    const formModel = this.queryForm.value;\r\n\r\n    let params = {}\r\n\r\n    if(formModel.params) {\r\n      try {\r\n        params = JSON.parse(formModel.params)\r\n      } catch(err) {\r\n        console.error(err);\r\n      }\r\n    }\r\n\r\n    this.neo4j.run(formModel.query, params).then(res => {\r\n      this.results = res\r\n      console.log(res);\r\n    });\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport neo4j from 'neo4j-driver/lib/browser/neo4j-web';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AngularNeo4jService {\r\n  driver;\r\n\r\n  constructor() {}\r\n\r\n  /**\r\n   * Create a new driver connection\r\n   */\r\n  connect(url, username, password, encrypted = true) {\r\n    return new Promise((resolve, reject) => {\r\n      try {\r\n        const auth = neo4j.auth.basic(username, password);\r\n\r\n        if (username && password && encrypted) {\r\n          this.driver = neo4j.driver(url, auth, { encrypted });\r\n        } else if (username && password) {\r\n          this.driver = neo4j.driver(url, auth);\r\n        } else {\r\n          this.driver = neo4j.driver(url);\r\n        }\r\n\r\n        resolve(this.driver);\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Close a driver connection\r\n   */\r\n  disconnect() {\r\n    if (this.driver) {\r\n      this.driver.close();\r\n      this.driver = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the last instantiated driver instance\r\n   */\r\n  getDriver() {\r\n    if (!this.driver) {\r\n      throw new Error(\r\n        'A connection has not been made to Neo4j. You will need to run `connect(url, username, password)` before you can get the current driver instance'\r\n      );\r\n    }\r\n    return this.driver;\r\n  }\r\n\r\n  /**\r\n   * Create a new driver session\r\n   */\r\n  getSession() {\r\n    if (!this.driver) {\r\n      throw new Error(\r\n        'A connection has not been made to Neo4j. You will need to run `connect(url, username, password)` before you can create a new session'\r\n      );\r\n    }\r\n\r\n    return this.driver.session();\r\n  }\r\n\r\n  /**\r\n   * Run a query on the current driver\r\n   */\r\n  run(query, params = null) {\r\n    const session = this.getSession();\r\n\r\n    return session.run(query, params).then(\r\n      results => {\r\n        session.close();\r\n\r\n        return results.records.map(record => {\r\n          var r = [];\r\n          for (var i = 0; i < record.length; i++) {\r\n            r[i] = this.processRecord(record.get(i));\r\n          }\r\n          return r;\r\n        });\r\n      },\r\n      err => {\r\n        session.close();\r\n        throw err;\r\n      }\r\n    );\r\n  }\r\n\r\n  private processInteger(integer) {\r\n    if (integer.constructor.name === 'Integer') {\r\n      return integer.toNumber();\r\n    }\r\n    return integer;\r\n  }\r\n\r\n  private processRecord(record) {\r\n    if (!record) {\r\n      return null;\r\n    }\r\n\r\n    if (record.constructor.name === 'Integer') {\r\n      return record.toNumber();\r\n    }\r\n\r\n    if (record.constructor.name === 'Path') {\r\n      record.start.identity = this.processInteger(record.start.identity);\r\n      record.end.identity = this.processInteger(record.end.identity);\r\n      record.segments = record.segments.map(segment => {\r\n        segment.start.identity = this.processInteger(segment.start.identity);\r\n        segment.end.identity = this.processInteger(segment.end.identity);\r\n\r\n        segment.relationship.identity = this.processInteger(\r\n          segment.relationship.identity\r\n        );\r\n        segment.relationship.start = this.processInteger(\r\n          segment.relationship.start\r\n        );\r\n        segment.relationship.end = this.processInteger(\r\n          segment.relationship.end\r\n        );\r\n\r\n        return segment;\r\n      });\r\n      return record;\r\n    }\r\n\r\n    if (record.constructor.name === 'Relationship') {\r\n      record.identity = this.processInteger(record.identity);\r\n      record.start = this.processInteger(record.start);\r\n      record.end = this.processInteger(record.end);\r\n      return record;\r\n    }\r\n\r\n    if (record.constructor.name === 'Node') {\r\n      record.identity = this.processInteger(record.identity);\r\n      return record;\r\n    }\r\n\r\n    return record;\r\n  }\r\n}\r\n"],"names":["neo4j"],"mappings":"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"}