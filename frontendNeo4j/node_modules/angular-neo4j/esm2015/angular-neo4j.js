import { Component, Injectable, NgModule, defineInjectable } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormBuilder, ReactiveFormsModule } from '@angular/forms';
import neo4j from 'neo4j-driver/lib/browser/neo4j-web';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class AngularNeo4jService {
    constructor() { }
    /**
     * Create a new driver connection
     * @param {?} url
     * @param {?} username
     * @param {?} password
     * @param {?=} encrypted
     * @return {?}
     */
    connect(url, username, password, encrypted = true) {
        return new Promise((resolve, reject) => {
            try {
                const /** @type {?} */ auth = neo4j.auth.basic(username, password);
                if (username && password && encrypted) {
                    this.driver = neo4j.driver(url, auth, { encrypted });
                }
                else if (username && password) {
                    this.driver = neo4j.driver(url, auth);
                }
                else {
                    this.driver = neo4j.driver(url);
                }
                resolve(this.driver);
            }
            catch (/** @type {?} */ e) {
                reject(e);
            }
        });
    }
    /**
     * Close a driver connection
     * @return {?}
     */
    disconnect() {
        if (this.driver) {
            this.driver.close();
            this.driver = null;
        }
    }
    /**
     * Get the last instantiated driver instance
     * @return {?}
     */
    getDriver() {
        if (!this.driver) {
            throw new Error('A connection has not been made to Neo4j. You will need to run `connect(url, username, password)` before you can get the current driver instance');
        }
        return this.driver;
    }
    /**
     * Create a new driver session
     * @return {?}
     */
    getSession() {
        if (!this.driver) {
            throw new Error('A connection has not been made to Neo4j. You will need to run `connect(url, username, password)` before you can create a new session');
        }
        return this.driver.session();
    }
    /**
     * Run a query on the current driver
     * @param {?} query
     * @param {?=} params
     * @return {?}
     */
    run(query, params = null) {
        const /** @type {?} */ session = this.getSession();
        return session.run(query, params).then(results => {
            session.close();
            return results.records.map(record => {
                var /** @type {?} */ r = [];
                for (var /** @type {?} */ i = 0; i < record.length; i++) {
                    r[i] = this.processRecord(record.get(i));
                }
                return r;
            });
        }, err => {
            session.close();
            throw err;
        });
    }
    /**
     * @param {?} integer
     * @return {?}
     */
    processInteger(integer) {
        if (integer.constructor.name === 'Integer') {
            return integer.toNumber();
        }
        return integer;
    }
    /**
     * @param {?} record
     * @return {?}
     */
    processRecord(record) {
        if (!record) {
            return null;
        }
        if (record.constructor.name === 'Integer') {
            return record.toNumber();
        }
        if (record.constructor.name === 'Path') {
            record.start.identity = this.processInteger(record.start.identity);
            record.end.identity = this.processInteger(record.end.identity);
            record.segments = record.segments.map(segment => {
                segment.start.identity = this.processInteger(segment.start.identity);
                segment.end.identity = this.processInteger(segment.end.identity);
                segment.relationship.identity = this.processInteger(segment.relationship.identity);
                segment.relationship.start = this.processInteger(segment.relationship.start);
                segment.relationship.end = this.processInteger(segment.relationship.end);
                return segment;
            });
            return record;
        }
        if (record.constructor.name === 'Relationship') {
            record.identity = this.processInteger(record.identity);
            record.start = this.processInteger(record.start);
            record.end = this.processInteger(record.end);
            return record;
        }
        if (record.constructor.name === 'Node') {
            record.identity = this.processInteger(record.identity);
            return record;
        }
        return record;
    }
}
AngularNeo4jService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] },
];
/** @nocollapse */
AngularNeo4jService.ctorParameters = () => [];
/** @nocollapse */ AngularNeo4jService.ngInjectableDef = defineInjectable({ factory: function AngularNeo4jService_Factory() { return new AngularNeo4jService(); }, token: AngularNeo4jService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class AngularNeo4jComponent {
    /**
     * @param {?} fb
     * @param {?} neo4j
     */
    constructor(fb, neo4j$$1) {
        this.fb = fb;
        this.neo4j = neo4j$$1;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.createForms();
    }
    /**
     * @return {?}
     */
    createForms() {
        this.loginForm = this.fb.group({
            url: 'bolt://localhost:7687',
            username: '',
            password: '',
            encrypted: true
        });
        this.queryForm = this.fb.group({
            query: '',
            params: ''
        });
    }
    /**
     * @return {?}
     */
    connect() {
        const /** @type {?} */ formModel = this.loginForm.value;
        this.neo4j
            .connect(formModel.url, formModel.username, formModel.password, formModel.encrypted)
            .then(driver => {
            if (driver) {
                console.log(`Successfully connected to ${this.loginForm.value.url}`);
            }
        });
    }
    /**
     * @return {?}
     */
    disconnect() {
        this.neo4j.disconnect();
    }
    /**
     * @return {?}
     */
    run() {
        const /** @type {?} */ formModel = this.queryForm.value;
        let /** @type {?} */ params = {};
        if (formModel.params) {
            try {
                params = JSON.parse(formModel.params);
            }
            catch (/** @type {?} */ err) {
                console.error(err);
            }
        }
        this.neo4j.run(formModel.query, params).then(res => {
            this.results = res;
            console.log(res);
        });
    }
}
AngularNeo4jComponent.decorators = [
    { type: Component, args: [{
                selector: 'angular-neo4j',
                template: "<form [formGroup]=\"loginForm\" (ngSubmit)=\"connect()\"> <label>URL: <br /> <input formControlName=\"url\" placeholder=\"bolt://host:port\"> </label> <br /> <br /> <label>Username: <br /> <input formControlName=\"username\"> </label> <br /> <br /> <label>Password: <br /> <input formControlName=\"password\"> </label> <br /> <br /> <label> <input formControlName=\"encrypted\" type=\"checkbox\"> Encrypted </label> <br /> <br /> <button type=\"submit\">Connect</button> <button type=\"button\" (click)=\"disconnect()\">Disconnect</button> </form> <br /> <br /> <form [formGroup]=\"queryForm\" (ngSubmit)=\"run()\"> <label>Cypher Query: <br /> <textarea formControlName=\"query\" placeholder=\"MATCH (o:Object {attrib: {value}}) RETURN o\"></textarea> </label> <br /> <br /> <label>Parameters JSON: <br /> <textarea formControlName=\"params\" placeholder='{ \"value\": \"value\" }'></textarea> </label> <br /> <br /> <button type=\"submit\">Run</button> </form> <br /> <br /> Results: <pre> {{results | json}} </pre>",
                styles: [""]
            },] },
];
/** @nocollapse */
AngularNeo4jComponent.ctorParameters = () => [
    { type: FormBuilder, },
    { type: AngularNeo4jService, },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class AngularNeo4jModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return {
            ngModule: AngularNeo4jModule,
            providers: [AngularNeo4jService]
        };
    }
}
AngularNeo4jModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, ReactiveFormsModule],
                exports: [AngularNeo4jComponent],
                providers: [AngularNeo4jService],
                declarations: [AngularNeo4jComponent]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Generated bundle index. Do not edit.
 */

export { AngularNeo4jModule, AngularNeo4jComponent, AngularNeo4jService };
//# sourceMappingURL=angular-neo4j.js.map
