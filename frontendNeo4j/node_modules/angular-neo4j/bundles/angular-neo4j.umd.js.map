{"version":3,"file":"angular-neo4j.umd.js","sources":["../../../build/src/angular-neo4j.module.ts","../../../build/src/angular-neo4j.component.ts","../../../build/src/angular-neo4j.service.ts"],"sourcesContent":["import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { AngularNeo4jComponent } from './angular-neo4j.component';\r\nimport { AngularNeo4jService } from './angular-neo4j.service';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\n\r\nexport * from './angular-neo4j.component';\r\nexport * from './angular-neo4j.service';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, ReactiveFormsModule],\r\n  exports: [AngularNeo4jComponent],\r\n  providers: [AngularNeo4jService],\r\n  declarations: [AngularNeo4jComponent]\r\n})\r\nexport class AngularNeo4jModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: AngularNeo4jModule,\r\n      providers: [AngularNeo4jService]\r\n    };\r\n  }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { AngularNeo4jService } from './angular-neo4j.service';\r\n\r\n@Component({\r\n  selector: 'angular-neo4j',\r\n  template: \"<form [formGroup]=\\\"loginForm\\\" (ngSubmit)=\\\"connect()\\\"> <label>URL: <br /> <input formControlName=\\\"url\\\" placeholder=\\\"bolt://host:port\\\"> </label> <br /> <br /> <label>Username: <br /> <input formControlName=\\\"username\\\"> </label> <br /> <br /> <label>Password: <br /> <input formControlName=\\\"password\\\"> </label> <br /> <br /> <label> <input formControlName=\\\"encrypted\\\" type=\\\"checkbox\\\"> Encrypted </label> <br /> <br /> <button type=\\\"submit\\\">Connect</button> <button type=\\\"button\\\" (click)=\\\"disconnect()\\\">Disconnect</button> </form> <br /> <br /> <form [formGroup]=\\\"queryForm\\\" (ngSubmit)=\\\"run()\\\"> <label>Cypher Query: <br /> <textarea formControlName=\\\"query\\\" placeholder=\\\"MATCH (o:Object {attrib: {value}}) RETURN o\\\"></textarea> </label> <br /> <br /> <label>Parameters JSON: <br /> <textarea formControlName=\\\"params\\\" placeholder='{ \\\"value\\\": \\\"value\\\" }'></textarea> </label> <br /> <br /> <button type=\\\"submit\\\">Run</button> </form> <br /> <br /> Results: <pre> {{results | json}} </pre>\",\r\n  styles: [\"\"]\r\n})\r\nexport class AngularNeo4jComponent implements OnInit {\r\n  loginForm: FormGroup;\r\n  queryForm: FormGroup;\r\n  driver: any;\r\n  results: any;\r\n\r\n  constructor(private fb: FormBuilder, private neo4j: AngularNeo4jService) {}\r\n\r\n  ngOnInit() {\r\n    this.createForms();\r\n  }\r\n\r\n  createForms() {\r\n    this.loginForm = this.fb.group({\r\n      url: 'bolt://localhost:7687',\r\n      username: '',\r\n      password: '',\r\n      encrypted: true\r\n    });\r\n    this.queryForm = this.fb.group({\r\n      query: '',\r\n      params: ''\r\n    });\r\n  }\r\n\r\n  connect() {\r\n    const formModel = this.loginForm.value;\r\n    this.neo4j\r\n      .connect(\r\n        formModel.url,\r\n        formModel.username,\r\n        formModel.password,\r\n        formModel.encrypted\r\n      )\r\n      .then(driver => {\r\n        if (driver) {\r\n          console.log(`Successfully connected to ${this.loginForm.value.url}`);\r\n        }\r\n      });\r\n  }\r\n\r\n  disconnect() {\r\n    this.neo4j.disconnect();\r\n  }\r\n\r\n  run() {\r\n    const formModel = this.queryForm.value;\r\n\r\n    let params = {}\r\n\r\n    if(formModel.params) {\r\n      try {\r\n        params = JSON.parse(formModel.params)\r\n      } catch(err) {\r\n        console.error(err);\r\n      }\r\n    }\r\n\r\n    this.neo4j.run(formModel.query, params).then(res => {\r\n      this.results = res\r\n      console.log(res);\r\n    });\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport neo4j from 'neo4j-driver/lib/browser/neo4j-web';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AngularNeo4jService {\r\n  driver;\r\n\r\n  constructor() {}\r\n\r\n  /**\r\n   * Create a new driver connection\r\n   */\r\n  connect(url, username, password, encrypted = true) {\r\n    return new Promise((resolve, reject) => {\r\n      try {\r\n        const auth = neo4j.auth.basic(username, password);\r\n\r\n        if (username && password && encrypted) {\r\n          this.driver = neo4j.driver(url, auth, { encrypted });\r\n        } else if (username && password) {\r\n          this.driver = neo4j.driver(url, auth);\r\n        } else {\r\n          this.driver = neo4j.driver(url);\r\n        }\r\n\r\n        resolve(this.driver);\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Close a driver connection\r\n   */\r\n  disconnect() {\r\n    if (this.driver) {\r\n      this.driver.close();\r\n      this.driver = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the last instantiated driver instance\r\n   */\r\n  getDriver() {\r\n    if (!this.driver) {\r\n      throw new Error(\r\n        'A connection has not been made to Neo4j. You will need to run `connect(url, username, password)` before you can get the current driver instance'\r\n      );\r\n    }\r\n    return this.driver;\r\n  }\r\n\r\n  /**\r\n   * Create a new driver session\r\n   */\r\n  getSession() {\r\n    if (!this.driver) {\r\n      throw new Error(\r\n        'A connection has not been made to Neo4j. You will need to run `connect(url, username, password)` before you can create a new session'\r\n      );\r\n    }\r\n\r\n    return this.driver.session();\r\n  }\r\n\r\n  /**\r\n   * Run a query on the current driver\r\n   */\r\n  run(query, params = null) {\r\n    const session = this.getSession();\r\n\r\n    return session.run(query, params).then(\r\n      results => {\r\n        session.close();\r\n\r\n        return results.records.map(record => {\r\n          var r = [];\r\n          for (var i = 0; i < record.length; i++) {\r\n            r[i] = this.processRecord(record.get(i));\r\n          }\r\n          return r;\r\n        });\r\n      },\r\n      err => {\r\n        session.close();\r\n        throw err;\r\n      }\r\n    );\r\n  }\r\n\r\n  private processInteger(integer) {\r\n    if (integer.constructor.name === 'Integer') {\r\n      return integer.toNumber();\r\n    }\r\n    return integer;\r\n  }\r\n\r\n  private processRecord(record) {\r\n    if (!record) {\r\n      return null;\r\n    }\r\n\r\n    if (record.constructor.name === 'Integer') {\r\n      return record.toNumber();\r\n    }\r\n\r\n    if (record.constructor.name === 'Path') {\r\n      record.start.identity = this.processInteger(record.start.identity);\r\n      record.end.identity = this.processInteger(record.end.identity);\r\n      record.segments = record.segments.map(segment => {\r\n        segment.start.identity = this.processInteger(segment.start.identity);\r\n        segment.end.identity = this.processInteger(segment.end.identity);\r\n\r\n        segment.relationship.identity = this.processInteger(\r\n          segment.relationship.identity\r\n        );\r\n        segment.relationship.start = this.processInteger(\r\n          segment.relationship.start\r\n        );\r\n        segment.relationship.end = this.processInteger(\r\n          segment.relationship.end\r\n        );\r\n\r\n        return segment;\r\n      });\r\n      return record;\r\n    }\r\n\r\n    if (record.constructor.name === 'Relationship') {\r\n      record.identity = this.processInteger(record.identity);\r\n      record.start = this.processInteger(record.start);\r\n      record.end = this.processInteger(record.end);\r\n      return record;\r\n    }\r\n\r\n    if (record.constructor.name === 'Node') {\r\n      record.identity = this.processInteger(record.identity);\r\n      return record;\r\n    }\r\n\r\n    return record;\r\n  }\r\n}\r\n"],"names":["FormBuilder","Component","defineInjectable"],"mappings":"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"}