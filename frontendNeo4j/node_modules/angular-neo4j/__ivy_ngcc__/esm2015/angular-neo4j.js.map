{"version":3,"file":"angular-neo4j.js","sources":["../../../build/src/angular-neo4j.service.ts","../../../build/src/angular-neo4j.component.ts","../../../build/src/angular-neo4j.module.ts"],"names":["neo4j"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\nimport neo4j from 'neo4j-driver/lib/browser/neo4j-web';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AngularNeo4jService {\r\n  driver;\r\n\r\n  constructor() {}\r\n\r\n  /**\r\n   * Create a new driver connection\r\n   */\r\n  connect(url, username, password, encrypted = true) {\r\n    return new Promise((resolve, reject) => {\r\n      try {\r\n        const auth = neo4j.auth.basic(username, password);\r\n\r\n        if (username && password && encrypted) {\r\n          this.driver = neo4j.driver(url, auth, { encrypted });\r\n        } else if (username && password) {\r\n          this.driver = neo4j.driver(url, auth);\r\n        } else {\r\n          this.driver = neo4j.driver(url);\r\n        }\r\n\r\n        resolve(this.driver);\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Close a driver connection\r\n   */\r\n  disconnect() {\r\n    if (this.driver) {\r\n      this.driver.close();\r\n      this.driver = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the last instantiated driver instance\r\n   */\r\n  getDriver() {\r\n    if (!this.driver) {\r\n      throw new Error(\r\n        'A connection has not been made to Neo4j. You will need to run `connect(url, username, password)` before you can get the current driver instance'\r\n      );\r\n    }\r\n    return this.driver;\r\n  }\r\n\r\n  /**\r\n   * Create a new driver session\r\n   */\r\n  getSession() {\r\n    if (!this.driver) {\r\n      throw new Error(\r\n        'A connection has not been made to Neo4j. You will need to run `connect(url, username, password)` before you can create a new session'\r\n      );\r\n    }\r\n\r\n    return this.driver.session();\r\n  }\r\n\r\n  /**\r\n   * Run a query on the current driver\r\n   */\r\n  run(query, params = null) {\r\n    const session = this.getSession();\r\n\r\n    return session.run(query, params).then(\r\n      results => {\r\n        session.close();\r\n\r\n        return results.records.map(record => {\r\n          var r = [];\r\n          for (var i = 0; i < record.length; i++) {\r\n            r[i] = this.processRecord(record.get(i));\r\n          }\r\n          return r;\r\n        });\r\n      },\r\n      err => {\r\n        session.close();\r\n        throw err;\r\n      }\r\n    );\r\n  }\r\n\r\n  private processInteger(integer) {\r\n    if (integer.constructor.name === 'Integer') {\r\n      return integer.toNumber();\r\n    }\r\n    return integer;\r\n  }\r\n\r\n  private processRecord(record) {\r\n    if (!record) {\r\n      return null;\r\n    }\r\n\r\n    if (record.constructor.name === 'Integer') {\r\n      return record.toNumber();\r\n    }\r\n\r\n    if (record.constructor.name === 'Path') {\r\n      record.start.identity = this.processInteger(record.start.identity);\r\n      record.end.identity = this.processInteger(record.end.identity);\r\n      record.segments = record.segments.map(segment => {\r\n        segment.start.identity = this.processInteger(segment.start.identity);\r\n        segment.end.identity = this.processInteger(segment.end.identity);\r\n\r\n        segment.relationship.identity = this.processInteger(\r\n          segment.relationship.identity\r\n        );\r\n        segment.relationship.start = this.processInteger(\r\n          segment.relationship.start\r\n        );\r\n        segment.relationship.end = this.processInteger(\r\n          segment.relationship.end\r\n        );\r\n\r\n        return segment;\r\n      });\r\n      return record;\r\n    }\r\n\r\n    if (record.constructor.name === 'Relationship') {\r\n      record.identity = this.processInteger(record.identity);\r\n      record.start = this.processInteger(record.start);\r\n      record.end = this.processInteger(record.end);\r\n      return record;\r\n    }\r\n\r\n    if (record.constructor.name === 'Node') {\r\n      record.identity = this.processInteger(record.identity);\r\n      return record;\r\n    }\r\n\r\n    return record;\r\n  }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { AngularNeo4jService } from './angular-neo4j.service';\r\n\r\n@Component({\r\n  selector: 'angular-neo4j',\r\n  template: \"<form [formGroup]=\\\"loginForm\\\" (ngSubmit)=\\\"connect()\\\"> <label>URL: <br /> <input formControlName=\\\"url\\\" placeholder=\\\"bolt://host:port\\\"> </label> <br /> <br /> <label>Username: <br /> <input formControlName=\\\"username\\\"> </label> <br /> <br /> <label>Password: <br /> <input formControlName=\\\"password\\\"> </label> <br /> <br /> <label> <input formControlName=\\\"encrypted\\\" type=\\\"checkbox\\\"> Encrypted </label> <br /> <br /> <button type=\\\"submit\\\">Connect</button> <button type=\\\"button\\\" (click)=\\\"disconnect()\\\">Disconnect</button> </form> <br /> <br /> <form [formGroup]=\\\"queryForm\\\" (ngSubmit)=\\\"run()\\\"> <label>Cypher Query: <br /> <textarea formControlName=\\\"query\\\" placeholder=\\\"MATCH (o:Object {attrib: {value}}) RETURN o\\\"></textarea> </label> <br /> <br /> <label>Parameters JSON: <br /> <textarea formControlName=\\\"params\\\" placeholder='{ \\\"value\\\": \\\"value\\\" }'></textarea> </label> <br /> <br /> <button type=\\\"submit\\\">Run</button> </form> <br /> <br /> Results: <pre> {{results | json}} </pre>\",\r\n  styles: [\"\"]\r\n})\r\nexport class AngularNeo4jComponent implements OnInit {\r\n  loginForm: FormGroup;\r\n  queryForm: FormGroup;\r\n  driver: any;\r\n  results: any;\r\n\r\n  constructor(private fb: FormBuilder, private neo4j: AngularNeo4jService) {}\r\n\r\n  ngOnInit() {\r\n    this.createForms();\r\n  }\r\n\r\n  createForms() {\r\n    this.loginForm = this.fb.group({\r\n      url: 'bolt://localhost:7687',\r\n      username: '',\r\n      password: '',\r\n      encrypted: true\r\n    });\r\n    this.queryForm = this.fb.group({\r\n      query: '',\r\n      params: ''\r\n    });\r\n  }\r\n\r\n  connect() {\r\n    const formModel = this.loginForm.value;\r\n    this.neo4j\r\n      .connect(\r\n        formModel.url,\r\n        formModel.username,\r\n        formModel.password,\r\n        formModel.encrypted\r\n      )\r\n      .then(driver => {\r\n        if (driver) {\r\n          console.log(`Successfully connected to ${this.loginForm.value.url}`);\r\n        }\r\n      });\r\n  }\r\n\r\n  disconnect() {\r\n    this.neo4j.disconnect();\r\n  }\r\n\r\n  run() {\r\n    const formModel = this.queryForm.value;\r\n\r\n    let params = {}\r\n\r\n    if(formModel.params) {\r\n      try {\r\n        params = JSON.parse(formModel.params)\r\n      } catch(err) {\r\n        console.error(err);\r\n      }\r\n    }\r\n\r\n    this.neo4j.run(formModel.query, params).then(res => {\r\n      this.results = res\r\n      console.log(res);\r\n    });\r\n  }\r\n\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { AngularNeo4jComponent } from './angular-neo4j.component';\r\nimport { AngularNeo4jService } from './angular-neo4j.service';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\n\r\nexport * from './angular-neo4j.component';\r\nexport * from './angular-neo4j.service';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, ReactiveFormsModule],\r\n  exports: [AngularNeo4jComponent],\r\n  providers: [AngularNeo4jService],\r\n  declarations: [AngularNeo4jComponent]\r\n})\r\nexport class AngularNeo4jModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: AngularNeo4jModule,\r\n      providers: [AngularNeo4jService]\r\n    };\r\n  }\r\n}\r\n"]}