import { Component, Injectable, NgModule, defineInjectable } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormBuilder, ReactiveFormsModule } from '@angular/forms';
import neo4j from 'neo4j-driver/lib/browser/neo4j-web';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/forms';
import * as ɵngcc2 from '@angular/common';
class AngularNeo4jService {
    constructor() { }
    /**
     * Create a new driver connection
     * @param {?} url
     * @param {?} username
     * @param {?} password
     * @param {?=} encrypted
     * @return {?}
     */
    connect(url, username, password, encrypted = true) {
        return new Promise((resolve, reject) => {
            try {
                const /** @type {?} */ auth = neo4j.auth.basic(username, password);
                if (username && password && encrypted) {
                    this.driver = neo4j.driver(url, auth, { encrypted });
                }
                else if (username && password) {
                    this.driver = neo4j.driver(url, auth);
                }
                else {
                    this.driver = neo4j.driver(url);
                }
                resolve(this.driver);
            }
            catch (/** @type {?} */ e) {
                reject(e);
            }
        });
    }
    /**
     * Close a driver connection
     * @return {?}
     */
    disconnect() {
        if (this.driver) {
            this.driver.close();
            this.driver = null;
        }
    }
    /**
     * Get the last instantiated driver instance
     * @return {?}
     */
    getDriver() {
        if (!this.driver) {
            throw new Error('A connection has not been made to Neo4j. You will need to run `connect(url, username, password)` before you can get the current driver instance');
        }
        return this.driver;
    }
    /**
     * Create a new driver session
     * @return {?}
     */
    getSession() {
        if (!this.driver) {
            throw new Error('A connection has not been made to Neo4j. You will need to run `connect(url, username, password)` before you can create a new session');
        }
        return this.driver.session();
    }
    /**
     * Run a query on the current driver
     * @param {?} query
     * @param {?=} params
     * @return {?}
     */
    run(query, params = null) {
        const /** @type {?} */ session = this.getSession();
        return session.run(query, params).then(results => {
            session.close();
            return results.records.map(record => {
                var /** @type {?} */ r = [];
                for (var /** @type {?} */ i = 0; i < record.length; i++) {
                    r[i] = this.processRecord(record.get(i));
                }
                return r;
            });
        }, err => {
            session.close();
            throw err;
        });
    }
    /**
     * @param {?} integer
     * @return {?}
     */
    processInteger(integer) {
        if (integer.constructor.name === 'Integer') {
            return integer.toNumber();
        }
        return integer;
    }
    /**
     * @param {?} record
     * @return {?}
     */
    processRecord(record) {
        if (!record) {
            return null;
        }
        if (record.constructor.name === 'Integer') {
            return record.toNumber();
        }
        if (record.constructor.name === 'Path') {
            record.start.identity = this.processInteger(record.start.identity);
            record.end.identity = this.processInteger(record.end.identity);
            record.segments = record.segments.map(segment => {
                segment.start.identity = this.processInteger(segment.start.identity);
                segment.end.identity = this.processInteger(segment.end.identity);
                segment.relationship.identity = this.processInteger(segment.relationship.identity);
                segment.relationship.start = this.processInteger(segment.relationship.start);
                segment.relationship.end = this.processInteger(segment.relationship.end);
                return segment;
            });
            return record;
        }
        if (record.constructor.name === 'Relationship') {
            record.identity = this.processInteger(record.identity);
            record.start = this.processInteger(record.start);
            record.end = this.processInteger(record.end);
            return record;
        }
        if (record.constructor.name === 'Node') {
            record.identity = this.processInteger(record.identity);
            return record;
        }
        return record;
    }
}
AngularNeo4jService.ɵfac = function AngularNeo4jService_Factory(t) { return new (t || AngularNeo4jService)(); };
AngularNeo4jService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: AngularNeo4jService, factory: AngularNeo4jService.ɵfac, providedIn: 'root' });
/** @nocollapse */
AngularNeo4jService.ctorParameters = () => [];
/** @nocollapse */ AngularNeo4jService.ngInjectableDef = defineInjectable({ factory: function AngularNeo4jService_Factory() { return new AngularNeo4jService(); }, token: AngularNeo4jService, providedIn: "root" });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AngularNeo4jService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return []; }, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class AngularNeo4jComponent {
    /**
     * @param {?} fb
     * @param {?} neo4j
     */
    constructor(fb, neo4j$$1) {
        this.fb = fb;
        this.neo4j = neo4j$$1;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.createForms();
    }
    /**
     * @return {?}
     */
    createForms() {
        this.loginForm = this.fb.group({
            url: 'bolt://localhost:7687',
            username: '',
            password: '',
            encrypted: true
        });
        this.queryForm = this.fb.group({
            query: '',
            params: ''
        });
    }
    /**
     * @return {?}
     */
    connect() {
        const /** @type {?} */ formModel = this.loginForm.value;
        this.neo4j
            .connect(formModel.url, formModel.username, formModel.password, formModel.encrypted)
            .then(driver => {
            if (driver) {
                console.log(`Successfully connected to ${this.loginForm.value.url}`);
            }
        });
    }
    /**
     * @return {?}
     */
    disconnect() {
        this.neo4j.disconnect();
    }
    /**
     * @return {?}
     */
    run() {
        const /** @type {?} */ formModel = this.queryForm.value;
        let /** @type {?} */ params = {};
        if (formModel.params) {
            try {
                params = JSON.parse(formModel.params);
            }
            catch (/** @type {?} */ err) {
                console.error(err);
            }
        }
        this.neo4j.run(formModel.query, params).then(res => {
            this.results = res;
            console.log(res);
        });
    }
}
AngularNeo4jComponent.ɵfac = function AngularNeo4jComponent_Factory(t) { return new (t || AngularNeo4jComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FormBuilder), ɵngcc0.ɵɵdirectiveInject(AngularNeo4jService)); };
AngularNeo4jComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: AngularNeo4jComponent, selectors: [["angular-neo4j"]], decls: 51, vars: 5, consts: [[3, "formGroup", "ngSubmit"], ["formControlName", "url", "placeholder", "bolt://host:port"], ["formControlName", "username"], ["formControlName", "password"], ["formControlName", "encrypted", "type", "checkbox"], ["type", "submit"], ["type", "button", 3, "click"], ["formControlName", "query", "placeholder", "MATCH (o:Object {attrib: {value}}) RETURN o"], ["formControlName", "params", "placeholder", "{ \"value\": \"value\" }"]], template: function AngularNeo4jComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "form", 0);
        ɵngcc0.ɵɵlistener("ngSubmit", function AngularNeo4jComponent_Template_form_ngSubmit_0_listener() { return ctx.connect(); });
        ɵngcc0.ɵɵelementStart(1, "label");
        ɵngcc0.ɵɵtext(2, "URL: ");
        ɵngcc0.ɵɵelement(3, "br");
        ɵngcc0.ɵɵelement(4, "input", 1);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(5, "br");
        ɵngcc0.ɵɵelement(6, "br");
        ɵngcc0.ɵɵelementStart(7, "label");
        ɵngcc0.ɵɵtext(8, "Username: ");
        ɵngcc0.ɵɵelement(9, "br");
        ɵngcc0.ɵɵelement(10, "input", 2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(11, "br");
        ɵngcc0.ɵɵelement(12, "br");
        ɵngcc0.ɵɵelementStart(13, "label");
        ɵngcc0.ɵɵtext(14, "Password: ");
        ɵngcc0.ɵɵelement(15, "br");
        ɵngcc0.ɵɵelement(16, "input", 3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(17, "br");
        ɵngcc0.ɵɵelement(18, "br");
        ɵngcc0.ɵɵelementStart(19, "label");
        ɵngcc0.ɵɵelement(20, "input", 4);
        ɵngcc0.ɵɵtext(21, " Encrypted ");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(22, "br");
        ɵngcc0.ɵɵelement(23, "br");
        ɵngcc0.ɵɵelementStart(24, "button", 5);
        ɵngcc0.ɵɵtext(25, "Connect");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(26, "button", 6);
        ɵngcc0.ɵɵlistener("click", function AngularNeo4jComponent_Template_button_click_26_listener() { return ctx.disconnect(); });
        ɵngcc0.ɵɵtext(27, "Disconnect");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(28, "br");
        ɵngcc0.ɵɵelement(29, "br");
        ɵngcc0.ɵɵelementStart(30, "form", 0);
        ɵngcc0.ɵɵlistener("ngSubmit", function AngularNeo4jComponent_Template_form_ngSubmit_30_listener() { return ctx.run(); });
        ɵngcc0.ɵɵelementStart(31, "label");
        ɵngcc0.ɵɵtext(32, "Cypher Query: ");
        ɵngcc0.ɵɵelement(33, "br");
        ɵngcc0.ɵɵelement(34, "textarea", 7);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(35, "br");
        ɵngcc0.ɵɵelement(36, "br");
        ɵngcc0.ɵɵelementStart(37, "label");
        ɵngcc0.ɵɵtext(38, "Parameters JSON: ");
        ɵngcc0.ɵɵelement(39, "br");
        ɵngcc0.ɵɵelement(40, "textarea", 8);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(41, "br");
        ɵngcc0.ɵɵelement(42, "br");
        ɵngcc0.ɵɵelementStart(43, "button", 5);
        ɵngcc0.ɵɵtext(44, "Run");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(45, "br");
        ɵngcc0.ɵɵelement(46, "br");
        ɵngcc0.ɵɵtext(47, " Results: ");
        ɵngcc0.ɵɵelementStart(48, "pre");
        ɵngcc0.ɵɵtext(49);
        ɵngcc0.ɵɵpipe(50, "json");
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("formGroup", ctx.loginForm);
        ɵngcc0.ɵɵadvance(30);
        ɵngcc0.ɵɵproperty("formGroup", ctx.queryForm);
        ɵngcc0.ɵɵadvance(19);
        ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(50, 3, ctx.results), " ");
    } }, directives: [ɵngcc1.ɵNgNoValidate, ɵngcc1.NgControlStatusGroup, ɵngcc1.FormGroupDirective, ɵngcc1.DefaultValueAccessor, ɵngcc1.NgControlStatus, ɵngcc1.FormControlName, ɵngcc1.CheckboxControlValueAccessor], pipes: [ɵngcc2.JsonPipe], styles: [""] });
/** @nocollapse */
AngularNeo4jComponent.ctorParameters = () => [
    { type: FormBuilder, },
    { type: AngularNeo4jService, },
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AngularNeo4jComponent, [{
        type: Component,
        args: [{
                selector: 'angular-neo4j',
                template: "<form [formGroup]=\"loginForm\" (ngSubmit)=\"connect()\"> <label>URL: <br /> <input formControlName=\"url\" placeholder=\"bolt://host:port\"> </label> <br /> <br /> <label>Username: <br /> <input formControlName=\"username\"> </label> <br /> <br /> <label>Password: <br /> <input formControlName=\"password\"> </label> <br /> <br /> <label> <input formControlName=\"encrypted\" type=\"checkbox\"> Encrypted </label> <br /> <br /> <button type=\"submit\">Connect</button> <button type=\"button\" (click)=\"disconnect()\">Disconnect</button> </form> <br /> <br /> <form [formGroup]=\"queryForm\" (ngSubmit)=\"run()\"> <label>Cypher Query: <br /> <textarea formControlName=\"query\" placeholder=\"MATCH (o:Object {attrib: {value}}) RETURN o\"></textarea> </label> <br /> <br /> <label>Parameters JSON: <br /> <textarea formControlName=\"params\" placeholder='{ \"value\": \"value\" }'></textarea> </label> <br /> <br /> <button type=\"submit\">Run</button> </form> <br /> <br /> Results: <pre> {{results | json}} </pre>",
                styles: [""]
            }]
    }], function () { return [{ type: ɵngcc1.FormBuilder }, { type: AngularNeo4jService }]; }, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class AngularNeo4jModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return {
            ngModule: AngularNeo4jModule,
            providers: [AngularNeo4jService]
        };
    }
}
AngularNeo4jModule.ɵfac = function AngularNeo4jModule_Factory(t) { return new (t || AngularNeo4jModule)(); };
AngularNeo4jModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: AngularNeo4jModule });
AngularNeo4jModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [AngularNeo4jService], imports: [[CommonModule, ReactiveFormsModule]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AngularNeo4jModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, ReactiveFormsModule],
                exports: [AngularNeo4jComponent],
                providers: [AngularNeo4jService],
                declarations: [AngularNeo4jComponent]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(AngularNeo4jModule, { declarations: function () { return [AngularNeo4jComponent]; }, imports: function () { return [CommonModule, ReactiveFormsModule]; }, exports: function () { return [AngularNeo4jComponent]; } }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Generated bundle index. Do not edit.
 */

export { AngularNeo4jModule, AngularNeo4jComponent, AngularNeo4jService };

//# sourceMappingURL=angular-neo4j.js.map